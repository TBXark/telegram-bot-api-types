extension TelegramAPI {
{{range .}}
    public enum Either{{.Count}}<{{range $i, $v := .Values}}{{if $i}}, {{end}}{{.}}: Codable{{end}}>: Codable {
        {{- range $i, $v := .Values}}
        case {{ToCamelCase .}}({{.}})
        {{- end}}

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            {{- range $i, $v:= .Values}}
            {{if gt $i 0}}else {{end}}if let value = try? container.decode({{$v}}.self) {
                self = .{{ToCamelCase $v}}(value)
            }
            {{- end -}} else {
                throw DecodingError.typeMismatch(Either{{.Count}}.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for Either{{.Count}}"))
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
                {{- range .Values}}
                case .{{ToCamelCase .}}(let value):
                    try container.encode(value)
                {{- end}}
            }
        }
    }
{{end}}
}