// Code generated by telegram-bot-api-types. DO NOT EDIT.
// Version {{.Version}}
{{range .Enums}}
export type {{.Name}} = {{range $i, $v := .Values}}{{if gt $i 0}} | {{end}}'{{.}}'{{end}};
{{end -}}

{{range .Types}}
/**
 * {{.Href}}  {{range .Description}}
 * {{.}}{{end}}
*/
{{- if IsAbstractType .}}
export type {{.Name}} = {{UnionsTypes .Subtypes}};
{{- else}}
export interface {{.Name}} {
    {{- range .Fields}}
    /** {{ToTypesDoc .Types}} | {{.Description}} */
    {{.Name}}{{if .Required}}: {{else}}?: {{end}}{{ToFieldTypes .}};
    {{- end}}
}
{{- end}}
{{end}}
export interface ResponseSuccess<T> {
    ok: true;
    result: T;
}

export interface ResponseError {
    ok: false;
    error_code: number;
    description: string;
}

export type SuccessWithOutData = true;

export type ResponseWithOutData = ResponseSuccess<SuccessWithOutData>;

export type ResponseWithMessage = ResponseSuccess<Message>;

{{range .Methods}}
{{- if HasParams .}}
/** {{.Href}} */
export interface {{ToPascalCase .Name}}Params {
    {{- range .Fields}}
    /** {{ToTypesDoc .Types}} | {{.Description}} */
    {{.Name}}{{if .Required}}: {{else}}?: {{end}}{{ToFieldTypes .}};
    {{- end}}
}
{{end}}
{{if HasResponse .Returns -}}
/** {{.Href}} */
export type {{ToPascalCase .Name}}Response = ResponseSuccess<{{UnionsTypes .Returns}}>;

{{end -}}
export interface {{ToPascalCase .Name}}Request {
    /**
     * {{.Href}}{{range .Description}}
     * {{.}}{{end}}
     */
    {{.Name}}: {{if HasParams .}}(params{{if IsParamsOptional .Fields}}?: {{else}}: {{end}}{{ToPascalCase .Name}}Params){{else}}(){{end}} => Promise<Response>;
    {{- if HasResponse .Returns}}
    /** * {{.Href}}{{range .Description}}
     * {{.}}{{end}}
     */
    {{.Name}}WithReturns: {{if HasParams .}}(params{{if IsParamsOptional .Fields}}?: {{else}}: {{end}}{{ToPascalCase .Name}}Params){{else}}(){{end}} => Promise<{{ToPascalCase .Name}}Response>;
    {{- end}}
}
{{end -}}

export type BotMethod = {{range $i, $v := .Methods}}{{if gt $i 0}} | {{end}}'{{.Name}}'{{end}};

export type AllBotMethods = {{range $i, $v := .Methods}}{{if gt $i 0}} & {{end}}{{ToPascalCase .Name}}Request{{end}};